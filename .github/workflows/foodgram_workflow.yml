name: foodgram workflow

on: 
  push:
    branches:
      - master
jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r ./backend/foodgram/requirements.txt
    - name: Tests Flake8 Django
      run: |
        python -m flake8 --config ./backend/setup.cfg
  build_and_push_to_docker_hub:
    name: Push Docker-image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend to Docker Hub
        uses: docker/build-push-action@v2 
        with:
          context: ./backend/foodgram/
          push: true
          tags: eve982/foodgram_backend:latest
      - name: Push frontend to Docker Hub 
        uses: docker/build-push-action@v2 
        with:
          context: ./frontend/
          push: true
          tags: eve982/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd foodgram-project-react/
            git pull

            cd backend/
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} > .env
            echo MODE=prod >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            echo SECRET_KEY='${{ secrets.SECRET_KEY }}' >> .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env

            cd ../infra/
            sudo docker pull eve982/foodgram_backend:latest
            sudo docker pull eve982/foodgram_frontend:latest
            sudo docker-compose stop
            sudo docker-compose rm backend
            sudo docker-compose up -d  --build

            sudo docker-compose exec backend python manage.py migrate
            sudo docker-compose exec backend python manage.py collectstatic --no-input

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
